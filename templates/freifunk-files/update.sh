#!/bin/sh
# # This file is generated by ansible
#
# This script is called every 5 minutes via crond
# It is taking care, that the freifunk network works
#   and all systems are running

# Server address
mac_addr="{{ bat0_mac_address }}"
mesh_ipv6_addr="{{ mesh_ipv6_address }}"
mesh_ipv6_extra_addr="{{ mesh_ipv6_extra_addr }}"
ff_prefix="{{ ipv6_prefix }}:"
mesh_ipv4_addr="{{ ipv4_mesh_address }}"

# For the map
geo=""
name="{{ hostname }}"
firmware="server"
community="{{ community }}"

# What should run?
run_mesh={{ run_mesh }}
run_gateway={{ run_gateway }}
run_webserver={{ run_webserver }}
run_icvpn={{ run_icvpn }}
run_map={{ run_map }}
run_stats={{ run_stats }}
dhcp_relay={{ da_laueft_ein_dhcp_relay }}
ipv6_uplink={{ ipv6_uplink_announcen }}
##############

# abort script on first error
set -e
set -u

export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin

#switch script directory
cd "$(dirname $0)"

#create an IPv6 ULA-address based on EUI-64
ula_addr()
{
        local prefix a prefix="$1" mac="$2" invert=${3:-0}

        #prefix="$(uci get network.globals.ula_prefix)"

        if [ $invert -eq 1 ]; then
                # translate to local administered mac
                a=${mac%%:*} #cut out first hex
                a=$((0x$a ^ 2)) #invert second least significant bit
                a=$(printf '%02x\n' $a) #convert back to hex
                mac="$a:${mac#*:}" #reassemble mac
        fi

        mac=${mac//:/} # remove ':'
        mac=${mac:0:6}fffe${mac:6:6} # insert fffe
        mac=$(echo $mac | sed 's/..../&:/g') # insert ':'

        # assemble IPv6 address
        echo "${prefix%%::*}:${mac%?}"
}


#limit server name length
name="$(echo $name | cut -c 1-31)"

#check for missing variables
[ -n "$ff_prefix" ] || { echo "(E) ff_prefix not set!"; exit 1; }
[ -n "$mesh_ipv6_addr" ] || { echo "(E) mesh_ipv6_addr not set!"; exit 1; }
[ -n "$mac_addr" ] || { echo "(E) mac_addr not set!"; exit 1; }

#test if process is running
is_running() {
    pidof "$1" > /dev/null || return $?
}

is_vx_running() {
    if [ ! -f "/sys/class/net/$1/operstate" ];then
       echo "$1 not up yet"
       return 1
    else
       cat /sys/class/net/$1/operstate | grep -q -v UNKNOWN > /dev/null || return $?
    fi
}

if [ $run_mesh = true ]; then

    #make sure batman-adv is loaded
    modprobe batman_adv

    #enable forwarding
    echo 1 > /proc/sys/net/ipv6/conf/default/forwarding
    echo 1 > /proc/sys/net/ipv6/conf/all/forwarding
    echo 1 > /proc/sys/net/ipv4/conf/default/forwarding
    echo 1 > /proc/sys/net/ipv4/conf/all/forwarding
    echo 1 > /proc/sys/net/ipv4/ip_forward
    
    # force BATMAN V routing algo _before_ batctl sets up any interface
    batctl ra BATMAN_V

    # Check for vx-backbone and start the connections if needed
    if ! is_vx_running "vx-backbone1"; then
        echo "Setting up vx-backbone1 to Gateway01"
        /sbin/ip link add vx-backbone1 type vxlan remote fd42:dead:beef:4::1 id 25 dstport 4225
        /sbin/ip link set up dev vx-backbone1
        /sbin/ip addr flush dev vx-backbone1
        /sbin/ip link set mtu 1280 dev vx-backbone1
        /usr/local/sbin/batctl if add vx-backbone1
    fi
    if ! is_vx_running "vx-backbone4"; then
        echo "Setting up vx-backbone4 to Gateway04"
        /sbin/ip link add vx-backbone4 type vxlan remote fd42:dead:beef:4::4 id 27 dstport 4225
        /sbin/ip link set up dev vx-backbone4
        /sbin/ip addr flush dev vx-backbone4
        /sbin/ip link set mtu 1280 dev vx-backbone4
        /usr/local/sbin/batctl if add vx-backbone4
    fi
    if ! is_vx_running "vxbackbonemeta"; then
        echo "Setting up vxbackbonemeta to meta Server"
        /sbin/ip link add vxbackbonemeta type vxlan remote fd42:dead:beef:4::5 id 29 dstport 4225
        /sbin/ip link set up dev vxbackbonemeta
        /sbin/ip addr flush dev vxbackbonemeta
        /sbin/ip link set mtu 1280 dev vxbackbonemeta
        /usr/local/sbin/batctl if add vxbackbonemeta
    fi

    # Fastd nodes setup
    if ! is_running "fastd"; then
        echo "(I) Start fastd."
	FASTDNODESFILES=/etc/fastd/fastd_nodes*
	for f in $FASTDNODESFILES
	do
	   fastd --config $f --daemon
	done
	sleep 1
    fi

    for i in $(seq 0 {{ number_of_cores|int -1 }});
     do
    	if [ $(batctl if | grep fastd_nodes0$i -c) = 0 ]; then
           echo "(I) Add fastd nodes0$i interface to batman-adv."
           ip link set fastd_nodes0$i up
           ip addr flush dev fastd_nodes0$i
        
        # force BATMAN V routing algo _before_ batctl sets up the interface
        echo BATMAN_V > /sys/module/batman_adv/parameters/routing_algo
        
        batctl if add fastd_nodes0$i
        fi
     done

    if [ "$(cat /sys/class/net/bat0/address 2> /dev/null)" != "$mac_addr" ]; then
        echo "(I) Set MAC address for bat0."
        ip link set bat0 down
        ip link set bat0 address "$mac_addr"
        ip link set bat0 up
        #set IPv4 address on bat0 for DNS; This is gateway specific!
        ip addr add "$mesh_ipv4_addr/20" dev bat0 2> /dev/null && echo "(I) Add IPv4-Address $mesh_ipv4_addr to bat0"
            # Add IPv6 address the same way the routers do.
            # This makes the address consistent with the one used on the routers status page.
            macaddr="$(batctl o | awk -F'[/ ]' '{print $7; exit;}')"
            euiaddr="$(ula_addr $ff_prefix $macaddr)"
            echo "(I) Set EUI64-Address: $euiaddr"
            ip a a "$euiaddr/64" dev bat0
        
        # we do not accept a default gateway through bat0
        echo 0 > /proc/sys/net/ipv6/conf/bat0/accept_ra
        #set neighbor table times to ten times the default
        echo 600 > /proc/sys/net/ipv6/neigh/bat0/gc_stale_time
        echo 300000 > /proc/sys/net/ipv6/neigh/bat0/base_reachable_time_ms
        echo "(I) Configure batman-adv."
        echo 10000 >  /sys/class/net/bat0/mesh/orig_interval
        echo 1 >  /sys/class/net/bat0/mesh/distributed_arp_table
        echo 1 >  /sys/class/net/bat0/mesh/multicast_mode
        echo 1 >  /sys/class/net/bat0/mesh/bridge_loop_avoidance
        echo 1 >  /sys/class/net/bat0/mesh/aggregated_ogms
        #set size of neighbor table
        gc_thresh=1024 #default is 256
        sysctl -w net.ipv4.neigh.default.gc_thresh1=$(($gc_thresh * 1))
        sysctl -w net.ipv4.neigh.default.gc_thresh2=$(($gc_thresh * 2))
        sysctl -w net.ipv4.neigh.default.gc_thresh3=$(($gc_thresh * 4))
        sysctl -w net.ipv6.neigh.default.gc_thresh1=$(($gc_thresh * 1))
        sysctl -w net.ipv6.neigh.default.gc_thresh2=$(($gc_thresh * 2))
        sysctl -w net.ipv6.neigh.default.gc_thresh3=$(($gc_thresh * 4))
    fi
    if ip -6 addr add "$mesh_ipv6_addr/64" dev bat0 2> /dev/null; then
        echo "(I) Set IP-Address of bat0 to $mesh_ipv6_addr"
    fi
    if ip -6 addr add "$mesh_ipv6_extra_addr/64" dev bat0 2> /dev/null; then
        echo "(I) Set Extra IPv6-Address of bat0 to $mesh_ipv6_extra_addr"
    fi
    if ! is_running "alfred"; then
        # remove remains
        rm -rf /var/run/alfred
        # set minimum access rights for reading information out of kernel debug interface
        chown root.alfred /sys/kernel/debug
        chmod 750 /sys/kernel/debug
        # create separate run dir with appropriate access rights because it gets deleted with every reboot
        mkdir --parents --mode=775 /var/run/alfred/
        chown alfred.alfred /var/run/alfred/
        echo "(I) Start alfred."
        # set umask of socket from 0117 to 0111 so that data can be pushed to alfred.sock below
                start-stop-daemon --start --quiet --pidfile /var/run/alfred/alfred.pid \
                    --umask 0111 --make-pidfile --chuid root:alfred \
                    --background --exec `which alfred` --oknodo -- -i bat0 -u /var/run/alfred/alfred.sock
        # wait for alfred to start up...
                sleep 1
        if ! is_running "alfred"; then echo "(E) alfred is not running!"
        fi
    fi
    #announce status website via alfred
    {
    echo -n "{\"link\" : \"http://[$mesh_ipv4_addr]/index.html\", \"label\" : \"Freifunk Gateway $name\"}"
} | alfred -s 91 -u /var/run/alfred/alfred.sock

    # do we have a tunnel to the internet ?
    if [ $run_gateway = true ]; 
      then gateway="true" 
      else gateway="false" 
    fi
        # do we have fastd ?
    if [ $run_mesh = true ]; 
      then vpn="true"
      else vpn="false"
    fi
    {
        echo -n "{"
        [ -n "$geo" ] && echo -n "\"geo\" : \"$geo\", "
        [ -n "$name" ] && echo -n "\"name\" : \"$name\", "
        [ -n "$firmware" ] && echo -n "\"firmware\" : \"$firmware\", "
        [ -n "$community" ] && echo -n "\"community\" : \"$community\", "
        [ -n "$vpn" ] && echo -n "\"vpn\" : $vpn, "
        [ -n "$gateway" ] && echo -n "\"gateway\" : $gateway, "
        echo -n "\"links\" : ["
        printLink() { echo -n "{ \"smac\" : \"$(cat /sys/class/net/$3/address)\", \"dmac\" : \"$1\", \"qual\" : $2 }"; }
        # do not remove the linebreak between quotes below - it is intentional
        IFS="
"
        nd=0
        for entry in $(batctl o |  sed "s/\*//g" |  tr '\t/[]()' ' ' |  awk '{ if($1==$4) print($1, $3, $5) }'); do
            [ $nd -eq 0 ] && nd=1 || echo -n ", "
            IFS=" "
            printLink $entry
        done
        echo -n '], '
        echo -n "\"clientcount\" : 0"
        echo -n '}'
    } | gzip -c - | alfred -s 64 -u /var/run/alfred/alfred.sock
fi # run_mesh
if [ $run_gateway = true ]; then
        if ! is_running "unbound"; then
                echo "(I) Start unbound."
                systemctl restart unbound.service 
        fi
        if [ $ipv6_uplink = true ]; then
            if ! is_running "radvd"; then
                echo "(I) Start radvd."
                systemctl restart radvd.service 
            fi
        fi
        if [ $dhcp_relay = true ]; then
	    if ! is_running "dhcrelay"; then
                systemctl restart isc-dhcp-relay.service
	    fi
        else
                if  ! is_running "dhcpd"; then
                        echo "(I) Start DHCP-Server."
                        rm -f /var/run/dhcpd.pid
                        systemctl start isc-dhcp-server
                fi
        fi
        # Activate the gateway announcements on a node that has a DHCP server running
        batctl gw_mode server 100mbit/100mbit
fi # run_gateway
if [ $run_map = true ]; then
        #collect all map pieces
        alfred -r 64 -u /var/run/alfred/alfred.sock > /tmp/maps.txt
        sed -i 's/  */ /g' /tmp/maps.txt # clean up extra whitespace stuff that gives us errors (for example from FUTROs)
        # create map data (meshviewer)
        ./map-backend.py -m /tmp/maps.txt --meshviewer-nodes /var/www/{{ hostname }}/nodes.json --meshviewer-graph /var/www/{{ hostname }}/graph.json
        /opt/freifunk/v2_map-backend.py -m /tmp/maps.txt --meshviewer-nodes /var/www/{{ hostname }}/nodes_v2.json --meshviewer-graph /var/www/{{ hostname }}/graph_v2.json
{% if nodelist == true %}
        /opt/freifunk/genNodeList.pl
{% endif %}

fi # run_map
{% if hostname == "meta.ffbsee.net" %}
if [ $run_webserver = true ]; then
    if ! is_running "nginx"; then
        echo "(I) Start apache."
        systemctl start apache2.service
    fi
fi # run_webserver
{% else %}
if [ $run_webserver = true ]; then
    if ! is_running "nginx"; then
        echo "(I) Start nginx."
        systemctl start nginx.service
    fi
fi # run_webserver
{% endif %}
if [ $run_icvpn = true ]; then
    if ! is_running "tincd"; then
        echo "(I) Start tincd."
        systemctl start tinc@icvpn
    fi
fi # run icvpn
if ! is_running "bird"; then
    echo "(I) Start bird."
    systemctl start bird.service
fi
if ! is_running "bird6"; then
    echo "(I) Start bird6."
    systemctl start bird6.service
fi  
echo "update done"




